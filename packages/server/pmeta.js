[{ name: 'ConfigModule', tag: 'ConfigModule', method: 'init', params: [], define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: 'name', index: 0 }], route: { route: '/user/user/user/user/user/user/register', type: 'post' }, define: { auth: false }, name: 'UserController', tag: 'user', method: 'register', header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: 'email', index: 0 }], route: { route: '/user/user/user/user/user/user/login', type: 'post' }, define: { auth: false }, name: 'UserController', tag: 'user', method: 'login', header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'params', key: 'filename', index: 0 }], route: { route: '/file/file/file/file/file/file/:filename', type: 'get' }, name: 'FileController', tag: 'FileController', method: 'getFile', define: {}, header: {}, middlewares: ['upload'], guards: [], interceptors: [] }, { route: { route: '/file/file/file/file/file/file', type: 'post' }, name: 'FileController', tag: 'FileController', method: 'upload', params: [], define: {}, header: {}, middlewares: ['upload'], guards: [], interceptors: [] }, { name: 'ProjectService', tag: 'ProjectService', method: 'init', params: [], define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: '', index: 0 }], route: { route: '/project/project/project/project/project/project', type: 'post' }, name: 'ProjectController', tag: 'ProjectController', method: 'createProject', define: { auth: 'user' }, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'params', key: 'name', index: 0 }], route: { route: '/project/project/project/project/project/project/:name', type: 'get' }, name: 'ProjectController', tag: 'ProjectController', method: 'getProjectInfo', define: { auth: 'user' }, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'params', key: 'projectId', index: 0 }], route: { route: '/linear/linear/linear/linear/linear/linear/issue/:projectId', type: 'get' }, name: 'LinearController', tag: 'LinearController', method: 'getIssue', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'params', key: 'project', index: 0 }], route: { route: '/linear/linear/linear/linear/linear/linear/project/:project', type: 'get' }, name: 'LinearController', tag: 'LinearController', method: 'getProject', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'params', key: 'issueId', index: 0 }], route: { route: '/linear/linear/linear/linear/linear/linear/comment/:issueId', type: 'post' }, name: 'LinearController', tag: 'LinearController', method: 'postComment', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: '', index: 0, validate: false }], route: { route: '/linear/linear/linear/linear/linear/linear/issue', type: 'post' }, name: 'LinearController', tag: 'LinearController', method: 'postIssue', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: '', index: 0, validate: false }], route: { route: '/report/report/report/report', type: 'post' }, name: 'ReportController', tag: 'ReportController', method: 'report', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { route: { route: '/record/time', type: 'get' }, name: 'RecordController', tag: 'RecordController', method: 'corn', params: [], define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'query', key: 'projectId', index: 0 }], route: { route: '/query/query/error_statistics', type: 'get' }, name: 'QueryController', tag: 'QueryController', method: 'getErrorStatistics', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'query', key: 'uid', index: 0 }], route: { route: '/query/query/error_record', type: 'get' }, name: 'QueryController', tag: 'QueryController', method: 'getErrorRecord', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'query', key: 'errorId', index: 0 }], route: { route: '/query/query/error_playback', type: 'post' }, name: 'QueryController', tag: 'QueryController', method: 'getPlayback', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }, { params: [{ type: 'body', key: 'time', index: 0 }], route: { route: '/query/query/error_actions', type: 'post' }, name: 'QueryController', tag: 'QueryController', method: 'getActions', define: {}, header: {}, middlewares: [], guards: [], interceptors: [] }]
